//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Assets/Scripts/Player_Movement/Moyai.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Moyai: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Moyai()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Moyai"",
    ""maps"": [
        {
            ""name"": ""MOAI"",
            ""id"": ""92a80381-0863-4674-8706-9d9ec3f5b30d"",
            ""actions"": [
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""c3642585-c06f-4b0d-aa07-4dc11a71ff2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""05de8ecb-a60d-43a8-ad48-67dea36edf7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""774b4397-6443-4765-8235-b8cb7e901e83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b726eb6-b587-49b6-81f6-3512cc7c60f5"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOAI"",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b25f7b8-9e52-410a-9f27-b64ff932619d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOAI"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""644bcbf3-a53a-4766-9dfd-2c531bf2bf0e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOAI"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MOAI"",
            ""bindingGroup"": ""MOAI"",
            ""devices"": [
                {
                    ""devicePath"": ""<SwitchProControllerHID>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MOAI
        m_MOAI = asset.FindActionMap("MOAI", throwIfNotFound: true);
        m_MOAI_Grow = m_MOAI.FindAction("Grow", throwIfNotFound: true);
        m_MOAI_Move = m_MOAI.FindAction("Move", throwIfNotFound: true);
        m_MOAI_Rotation = m_MOAI.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MOAI
    private readonly InputActionMap m_MOAI;
    private List<IMOAIActions> m_MOAIActionsCallbackInterfaces = new List<IMOAIActions>();
    private readonly InputAction m_MOAI_Grow;
    private readonly InputAction m_MOAI_Move;
    private readonly InputAction m_MOAI_Rotation;
    public struct MOAIActions
    {
        private @Moyai m_Wrapper;
        public MOAIActions(@Moyai wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grow => m_Wrapper.m_MOAI_Grow;
        public InputAction @Move => m_Wrapper.m_MOAI_Move;
        public InputAction @Rotation => m_Wrapper.m_MOAI_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_MOAI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MOAIActions set) { return set.Get(); }
        public void AddCallbacks(IMOAIActions instance)
        {
            if (instance == null || m_Wrapper.m_MOAIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MOAIActionsCallbackInterfaces.Add(instance);
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IMOAIActions instance)
        {
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IMOAIActions instance)
        {
            if (m_Wrapper.m_MOAIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMOAIActions instance)
        {
            foreach (var item in m_Wrapper.m_MOAIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MOAIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MOAIActions @MOAI => new MOAIActions(this);
    private int m_MOAISchemeIndex = -1;
    public InputControlScheme MOAIScheme
    {
        get
        {
            if (m_MOAISchemeIndex == -1) m_MOAISchemeIndex = asset.FindControlSchemeIndex("MOAI");
            return asset.controlSchemes[m_MOAISchemeIndex];
        }
    }
    public interface IMOAIActions
    {
        void OnGrow(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
